# -*- coding: utf-8 -*-
"""Agente_tratamento de dados.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L7aXanQHmETtZCnTEzhc_VBbefw7quS6
"""

# Importe as bibliotecas
import google.generativeai as genai
import pandas as pd

from google.colab import files
uploaded = files.upload()

# Load the Excel files into DataFrames
df_ativos = pd.read_excel('ATIVOS.xlsx')
df_ferias = pd.read_excel('FÉRIAS.xlsx')
df_desligados = pd.read_excel('DESLIGADOS.xlsx')
df_admissao = pd.read_excel('ADMISSÃO ABRIL.xlsx')
df_sindicato = pd.read_excel('Base sindicato x valor.xlsx')
df_dias_uteis = pd.read_excel('Base dias uteis.xlsx')
df_admissao = pd.read_excel('ADMISSÃO ABRIL.xlsx')
df_ativos = pd.read_excel('ATIVOS.xlsx')
df_desligados = pd.read_excel('DESLIGADOS.xlsx')
df_ferias = pd.read_excel('FÉRIAS.xlsx')

# Print info and head for each DataFrame to understand their structure
print('--- ATIVOS.xlsx ---')
print(df_ativos.info())
print(df_ativos.head())
print('\n')

print('--- FÉRIAS.xlsx ---')
print(df_ferias.info())
print(df_ferias.head())
print('\n')

print('--- DESLIGADOS.xlsx ---')
print(df_desligados.info())
print(df_desligados.head())
print('\n')

print('--- ADMISSÃO ABRIL.xlsx ---')
print(df_admissao.info())
print(df_admissao.head())
print('\n')

print('--- Base sindicato x valor.xlsx ---')
print(df_sindicato.info())
print(df_sindicato.head())
print('\n')

print('--- Base dias uteis.xlsx ---')
print(df_dias_uteis.info())
print(df_dias_uteis.head())
print('\n')

print('--- FÉRIAS.xlsx ---')
print(df_ferias.info())
print(df_ferias.head())
print('\n')

print('--- DESLIGADOS.xlsx ---')
print(df_desligados.info())
print(df_desligados.head())
print('\n')

print('--- ADMISSÃO ABRIL.xlsx ---')
print(df_admissao.info())
print(df_admissao.head())
print('\n')

print('--- Base sindicato x valor.xlsx ---')
print(df_sindicato.info())
print(df_sindicato.head())
print('\n')

print('--- Base dias uteis.xlsx ---')
print(df_dias_uteis.info())
print(df_dias_uteis.head())
print('\n')





"""Base única consolidada: Reunir e consolidar informações de 5 bases separadas em uma única base final para (Ativos, Férias, desligados, Base cadastral (admitidos do mês), Base sindicato x valor e Dias úteis por colaborador."""

#Crear a base única consolidada

# Imprima as colunas de cada DataFrame para verificar os nomes
print('--- Colunas de ADMISSÃO ABRIL ---')
print(df_admissao.columns.tolist())
print('\n')

print('--- Colunas de ATIVOS ---')
print(df_ativos.columns.tolist())
print('\n')

print('--- Colunas de DESLIGADOS ---')
print(df_desligados.columns.tolist())
print('\n')

print('--- Colunas de FÉRIAS ---')
print(df_ferias.columns.tolist())
print('\n')

#Correção do nome da coluna MATRICULA no DataFrame df_desligados
df_desligados = df_desligados.rename(columns={'MATRICULA ': 'MATRICULA'})

print('--- Colunas de DESLIGADOS ---')
print(df_desligados.columns.tolist())
print('\n')

# Iniciar consolidação
df_consolidado = df_ativos.copy()

# Juntar df_admissao with df_consolidado usando 'MATRICULA'
df_consolidado = pd.merge(df_consolidado, df_admissao[['MATRICULA', 'Admissão']], on='MATRICULA', how='left')

#  Juntar df_admissao with df_consolidado usando 'MATRICULA'
df_consolidado = pd.merge(df_consolidado, df_desligados[['MATRICULA', 'DATA DEMISSÃO']], on='MATRICULA', how='left')

#  Juntar df_admissao with df_consolidado usando 'MATRICULA'
df_consolidado = pd.merge(df_consolidado, df_ferias[['MATRICULA', 'DIAS DE FÉRIAS']], on='MATRICULA', how='left')

# Imprimir o DataFrame consolidado como tabela
print('--- DataFrame Consolidado (Tabela) ---')
print(df_consolidado.to_string())

#Tratar as exclusões, como remover os diretores, estagiários e aprendizes.
# Carregue os arquivos relacionados às exclusões
df_aprendiz = pd.read_excel('APRENDIZ.xlsx')
df_estagio = pd.read_excel('ESTÁGIO.xlsx')
df_exterior = pd.read_excel('EXTERIOR.xlsx')
df_afastamentos = pd.read_excel('AFASTAMENTOS.xlsx')

# Imprimir informações e ir para cada DataFrame para entender sua estrutura
print('--- APRENDIZ.xlsx ---')
print(df_aprendiz.info())
print(df_aprendiz.head())
print('\n')

print('--- ESTÁGIO.xlsx ---')
print(df_estagio.info())
print(df_estagio.head())
print('\n')

print('--- EXTERIOR.xlsx ---')
print(df_exterior.info())
print(df_exterior.head())
print('\n')

print('--- AFASTAMENTOS.xlsx ---')
print(df_afastamentos.info())
print(df_afastamentos.head())
print('\n')

# Excluir Diretores
df_final = df_consolidado[~df_consolidado['TITULO DO CARGO'].str.contains('DIRETOR', case=False, na=False)].copy()
# Lista de empleados a ser ecluidos
list_afastados = df_afastamentos['MATRICULA'].tolist()
list_aprendiz = df_aprendiz['MATRICULA'].tolist()
list_estagio = df_estagio['MATRICULA'].tolist()
# Observe o nome diferente da coluna para o arquivo externo
list_exterior = df_exterior['Cadastro'].tolist()
# Combine todas as listas de exclusão
list_exclusoes = list_afastados + list_aprendiz + list_estagio + list_exterior
# Filtrar os funcionários na lista de exclusão combinada
df_final = df_final[~df_final['MATRICULA'].isin(list_exclusoes)].copy()

# Imprimir o DataFrame Final como tabela
print('--- DataFrame Consolidado Final ---')
print(df_consolidado.to_string())

# --- Cálculo dos dias de beneficios ---

df_dias_uteis = pd.read_excel('Base dias uteis.xlsx', header=1)
df_sindicato = pd.read_excel('Base sindicato x valor.xlsx')

# Imprimir informações e ir para cada DataFrame para entender sua estrutura
print('--- Base dias uteis.xlsx ---')
print(df_dias_uteis.info())
print(df_dias_uteis.head())
print('\n')

print('--- Base sindicato x valor.xlsx ---')
print(df_sindicato.info())
print(df_sindicato.head())
print('\n')

# --- Preparação dos dados para o cálculo ---
# Limpar e renomear colunas em  df_dias_uteis
df_dias_uteis = df_dias_uteis.rename(columns={'BASE DIAS UTEIS DE 15/04 a 15/05': 'Sindicato', 'Unnamed: 1': 'DIAS UTEIS'})
# Limpar e renomear colunas em  df_sindicato
df_sindicato.columns = df_sindicato.columns.str.strip()
df_sindicato = df_sindicato.rename(columns={'ESTADO': 'Estado', 'VALOR':'Valor_VR'})

# --- DEBUGGING: Imprima colunas imediatamente antes da mesclagem para diagnosticar o KeyError ---
print("Colunas do DataFrame df_final antes do merge:")
print(df_final.columns.tolist())
print("\nColunas do DataFrame df_dias_uteis antes do merge:")
print(df_dias_uteis.columns.tolist())
print("\nColunas do DataFrame df_sindicato antes do merge:")
print(df_sindicato.columns.tolist())

# Crie uma coluna de estado no DataFrame principal
df_final['Estado'] = df_final['Sindicato'].apply(lambda x: re.search(r'(SP|RS|RJ|PR|MT)$', x).group(1) if re.search(r'(SP|RS|RJ|PR|MT)$', x) else None)

# Merge the prepared DataFrames into the main DataFrame
df_final = pd.merge(df_final, df_dias_uteis, on='Sindicato', how='left')
df_final = pd.merge(df_final, df_sindicato, on='Estado', how='left')